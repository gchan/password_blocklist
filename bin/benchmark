#!/usr/bin/env ruby

require 'set'
require 'bundler/setup'
require 'password_blacklist'
require 'benchmark/ips'

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  x.report('file read') do |times|
    i = 0
    while i < times
      PasswordBlacklist.blacklisted?('AccurateUnicornCoalPaperclip')
      i += 1
    end
  end

  x.report('in memory') do |times|
    tester = PasswordBlacklist::Checker.new
    i = 0
    while i < times
      tester.blacklisted?('AccurateUnicornCoalPaperclip')
      i += 1
    end
  end

  x.compare!
end

# Testing various string matching methods

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  file_path = File.expand_path('../../data/Top95Thousand-probable.txt', __FILE__)
  blacklist = File.read(file_path)

  x.report('match') do
    !!blacklist.match(Regexp.escape('AccurateUnicornCoalPaperclip'))
  end

  if ''.respond_to?(:match?)
    x.report('match?') do
      blacklist.match? Regexp.escape('AccurateUnicornCoalPaperclip')
    end
  end

  x.report('===') do
    Regexp.new(Regexp.escape('AccurateUnicornCoalPaperclip')) === blacklist
  end

  x.report('include?') do
    blacklist.include? Regexp.escape('AccurateUnicornCoalPaperclip')
  end

  x.compare!
end

# Testing in memory data structures (assuming space is not an issue)

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  file_path = File.expand_path('../../data/Top95Thousand-probable.txt', __FILE__)
  blacklist = File.read(file_path)
  array     = blacklist.split("\n")
  set       = array.to_set

  x.report('String#match') do
    blacklist.match Regexp.escape('AccurateUnicornCoalPaperclip')
  end

  x.report('Set#include?') do
    set.include?('AccurateUnicornCoalPaperclip')
  end

  x.report('Array#bsearch') do
    !!array.bsearch { |password| 'AccurateUnicornCoalPaperclip' <=> password }
  end

  x.compare!
end

# Testing two forms of ignoring case sensitivity

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  file_path = File.expand_path('../../data/Top95Thousand-probable.txt', __FILE__)
  blacklist = File.read(file_path)

  x.report('String#downcase') do
    blacklist.match Regexp.escape('AccurateUnicornCoalPaperclip'.downcase)
  end

  x.report('Regexp ignore case') do
    blacklist.match /#{Regexp.escape('AccurateUnicornCoalPaperclip')}/i
  end

  x.compare!
end
