#!/usr/bin/env ruby
# frozen_string_literal: true

require 'set'
require 'bundler/setup'
require 'password_blocklist'
require 'benchmark/ips'

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  x.report('file read') do |times|
    i = 0
    while i < times
      PasswordBlocklist.blocklisted?('AccurateUnicornCoalPaperclip')
      i += 1
    end
  end

  x.report('in memory') do |times|
    tester = PasswordBlocklist::Checker.new
    i = 0
    while i < times
      tester.blocklisted?('AccurateUnicornCoalPaperclip')
      i += 1
    end
  end

  x.compare!
end

# Testing various string matching methods

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  file_path = File.expand_path('../data/Top95Thousand-probable.txt', __dir__)
  blocklist = File.read(file_path)

  x.report('match') do
    !blocklist.match(Regexp.escape('AccurateUnicornCoalPaperclip')).nil?
  end

  if ''.respond_to?(:match?)
    x.report('match?') do
      blocklist.match? Regexp.escape('AccurateUnicornCoalPaperclip')
    end
  end

  x.report('===') do
    # rubocop:disable Style/CaseEquality
    Regexp.new(Regexp.escape('AccurateUnicornCoalPaperclip')) === blocklist
    # rubocop:enable all
  end

  x.report('include?') do
    blocklist.include? Regexp.escape('AccurateUnicornCoalPaperclip')
  end

  x.compare!
end

# Testing in memory data structures (assuming space is not an issue)

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  file_path = File.expand_path('../data/Top95Thousand-probable.txt', __dir__)
  blocklist = File.read(file_path)
  array     = blocklist.split("\n")
  set       = array.to_set

  x.report('String#match') do
    blocklist.match Regexp.escape('AccurateUnicornCoalPaperclip')
  end

  x.report('Set#include?') do
    set.include?('AccurateUnicornCoalPaperclip')
  end

  x.report('Array#bsearch') do
    !array.bsearch { |password| 'AccurateUnicornCoalPaperclip' <=> password }.nil?
  end

  x.compare!
end

# Testing two forms of ignoring case sensitivity

Benchmark.ips do |x|
  x.warmup = 2
  x.time = 5

  file_path = File.expand_path('../data/Top95Thousand-probable.txt', __dir__)
  blocklist = File.read(file_path)

  x.report('String#downcase') do
    blocklist.match Regexp.escape('AccurateUnicornCoalPaperclip'.downcase)
  end

  x.report('Regexp ignore case') do
    blocklist.match(/#{Regexp.escape('AccurateUnicornCoalPaperclip')}/i)
  end

  x.compare!
end
